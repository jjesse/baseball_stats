name: Update Playoff Predictions

on:
  schedule:
    - cron: '30 13 * * *'  # Runs daily at 13:30 UTC (main branch only), after standings update
  workflow_dispatch:      # Allow manual trigger

jobs:
  update-playoff-predictions:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Skip scheduled runs on preview branch
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas matplotlib seaborn numpy requests beautifulsoup4
        timeout-minutes: 5

      - name: Generate playoff predictions
        run: |
          # Create placeholder playoff_predictor.py if it doesn't exist
          if [ ! -f "playoff_predictor.py" ]; then
            echo "Placeholder playoff predictor script. Will be implemented in future updates." > playoff_predictor.py
            echo "import json, os, datetime" >> playoff_predictor.py
            echo "output_path = os.environ.get('OUTPUT_PATH', 'docs')" >> playoff_predictor.py
            echo "os.makedirs(output_path, exist_ok=True)" >> playoff_predictor.py
            echo "predictions = {'last_updated': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'placeholder': True}" >> playoff_predictor.py
            echo "with open(f'{output_path}/playoff_predictions.json', 'w') as f:" >> playoff_predictor.py
            echo "    json.dump(predictions, f, indent=2)" >> playoff_predictor.py
            echo "print('Created placeholder playoff predictions')" >> playoff_predictor.py
          fi
          
          # Set output path based on branch
          if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
            export OUTPUT_PATH="docs/preview"
            mkdir -p docs/preview
          else
            export OUTPUT_PATH="docs"
          fi
          
          # Run the playoff predictor script
          python playoff_predictor.py || {
            echo "Warning: playoff_predictor.py failed, creating fallback file"
            mkdir -p "${OUTPUT_PATH}"
            echo "{\"last_updated\": \"$(date -Iseconds)\", \"error\": true}" > "${OUTPUT_PATH}/playoff_predictions.json"
          }
        timeout-minutes: 5
        continue-on-error: true

      - name: Commit and push changes with retry
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Set output path and files based on branch
            if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
              export OUTPUT_PATH="docs/preview"
              mkdir -p docs/preview
              COMMIT_MSG="Update playoff predictions (preview) [skip ci]"
              FILE_PATTERN="docs/preview/playoff_predictions.json docs/preview/playoff_*.png playoff_predictor.py"
            else
              export OUTPUT_PATH="docs"
              COMMIT_MSG="Update playoff predictions [skip ci]"
              FILE_PATTERN="docs/playoff_predictions.json docs/playoff_*.png playoff_predictor.py"
            fi
            
            # Retry logic with proper conflict resolution
            for attempt in {1..5}; do
              echo "Attempt $attempt to push changes..."
              
              # Fetch latest changes
              git fetch origin ${{ github.ref_name }}
              
              # Check if we're behind
              BEHIND=$(git rev-list --count HEAD..origin/${{ github.ref_name }})
              if [ "$BEHIND" -gt 0 ]; then
                echo "Local branch is $BEHIND commits behind. Attempting to rebase..."
                
                # Reset to origin
                git reset --hard origin/${{ github.ref_name }}
                
                # Re-run the scripts to ensure fresh data
                python playoff_predictor.py || {
                  echo "Warning: playoff_predictor.py failed, creating fallback file"
                  mkdir -p "${OUTPUT_PATH}"
                  echo "{\"last_updated\": \"$(date -Iseconds)\", \"error\": true}" > "${OUTPUT_PATH}/playoff_predictions.json"
                }
                
                # Stage the new files
                git add $FILE_PATTERN
                
                # Check if there are actually changes after re-running
                if [[ -z $(git diff --cached) ]]; then
                  echo "No changes after re-running scripts. Exiting."
                  exit 0
                fi
              else
                # We're up to date, just add our changes
                git add $FILE_PATTERN
              fi
              
              # Commit changes
              git commit -m "$COMMIT_MSG" || {
                echo "Nothing to commit on attempt $attempt"
                exit 0
              }
              
              # Try to push
              if git push origin ${{ github.ref_name }}; then
                echo "Successfully pushed on attempt $attempt"
                exit 0
              else
                echo "Push failed on attempt $attempt. Retrying in 10 seconds..."
                sleep 10
              fi
            done
            
            # If all attempts failed
            echo "Failed to push after 5 attempts"
            exit 1
          else
            echo "No changes to commit"
          fi
        timeout-minutes: 5

      - name: Check for failures
        if: failure()
        run: |
          echo "::error::Playoff predictions workflow failed! Check the logs for details."
          exit 1
