name: Update Standings

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 4 * * *'

jobs:
  update-standings:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas matplotlib seaborn requests beautifulsoup4
      timeout-minutes: 5

    - name: Generate standings charts
      run: |
        if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
          export OUTPUT_PATH="docs/preview"
          mkdir -p docs/preview
        else
          export OUTPUT_PATH="docs"
        fi
        python standings_chart.py || python fix_standings_now.py || exit 1
      timeout-minutes: 10
      continue-on-error: false

    - name: Archive current standings
      run: |
        mkdir -p archive
        if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
          if [ -f "docs/preview/standings_all.csv" ]; then
            cp docs/preview/standings_all.csv archive/standings_$(date +%F).csv
          fi
        else
          if [ -f "docs/standings_all.csv" ]; then
            cp docs/standings_all.csv archive/standings_$(date +%F).csv
          fi
        fi
      timeout-minutes: 2

    - name: Commit and push changes
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check if there are changes
        if [[ -n $(git status --porcelain) ]]; then
          # Pull latest changes to avoid conflicts
          git fetch origin
          git pull origin ${{ github.ref_name }} --rebase || true
          
          # Set file patterns based on branch
          if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
            COMMIT_MSG="Update standings (preview) [skip ci]"
            FILES_TO_ADD="docs/preview/standings_*.html docs/preview/standings_*.png docs/preview/standings_summary.json docs/preview/last_updated_standings.txt archive/standings_*.csv"
          else
            COMMIT_MSG="Update standings [skip ci]"
            FILES_TO_ADD="docs/standings_*.html docs/standings_*.png docs/standings_summary.json docs/last_updated_standings.txt archive/standings_*.csv"
          fi
          
          # Add files (use individual adds to avoid globbing issues)
          git add docs/standings_*.html || true
          git add docs/standings_*.png || true
          git add docs/standings_summary.json || true
          git add docs/last_updated_standings.txt || true
          git add archive/standings_*.csv || true
          
          # Commit changes
          git commit -m "$COMMIT_MSG" || {
            echo "No changes to commit after git add"
            exit 0
          }
          
          # Push with retry logic
          for attempt in 1 2 3; do
            echo "Push attempt $attempt..."
            if git push origin ${{ github.ref_name }}; then
              echo "âœ“ Successfully pushed changes"
              exit 0
            else
              echo "Push failed, attempt $attempt/3"
              if [ $attempt -lt 3 ]; then
                echo "Retrying after rebase..."
                git fetch origin
                git rebase origin/${{ github.ref_name }} || {
                  echo "Rebase failed, trying merge..."
                  git merge origin/${{ github.ref_name }} || true
                }
                sleep 10
              fi
            fi
          done
          
          echo "Failed to push after 3 attempts"
          exit 1
        else
          echo "No changes detected"
        fi
      timeout-minutes: 5