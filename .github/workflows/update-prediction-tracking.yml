name: Update Prediction Tracking

on:
  schedule:
    - cron: '10 14 * * *'  # Runs daily at 14:10 UTC - 10 minutes after MVP/Cy Young updates
  workflow_dispatch:      # Allow manual trigger

jobs:
  update-prediction-tracking:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas matplotlib seaborn numpy
        timeout-minutes: 5

      - name: Wait for MVP/Cy Young data to be available
        run: |
          # Wait up to 5 minutes for the MVP/Cy Young data to be available
          max_attempts=30
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if [ -f "docs/award_predictions.json" ]; then
              # Check if the file was updated recently (within last 30 minutes)
              if [ "$(find docs/award_predictions.json -mmin -30)" ]; then
                echo "Fresh MVP/Cy Young data found, proceeding with tracking..."
                break
              fi
            fi
            
            echo "Waiting for MVP/Cy Young data... (attempt $((attempt+1))/$max_attempts)"
            sleep 10
            attempt=$((attempt+1))
            
            # Pull latest changes in case MVP/Cy Young workflow just completed
            git fetch origin ${{ github.ref_name }}
            git reset --hard origin/${{ github.ref_name }}
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Warning: MVP/Cy Young data not found or not recently updated"
            echo "Continuing with prediction tracking anyway..."
          fi
        timeout-minutes: 5

      - name: Run prediction tracking
        run: |
          # Set output path based on branch
          if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
            export OUTPUT_PATH="docs/preview"
            mkdir -p docs/preview
          else
            export OUTPUT_PATH="docs"
          fi
          python prediction_tracker.py || exit 1
        timeout-minutes: 5

      - name: Commit and push changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Set output path based on branch
            if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
              export OUTPUT_PATH="docs/preview"
              mkdir -p docs/preview
              COMMIT_MSG="Update prediction tracking and accuracy analysis (preview) [skip ci]"
              FILE_PATTERN="docs/preview/prediction_history/ docs/preview/prediction_accuracy* docs/preview/actual_winners.json"
            else
              export OUTPUT_PATH="docs"
              COMMIT_MSG="Update prediction tracking and accuracy analysis [skip ci]"
              FILE_PATTERN="docs/prediction_history/ docs/prediction_accuracy* docs/actual_winners.json"
            fi
            
            # Retry logic for push conflicts
            for attempt in {1..3}; do
              echo "Attempt $attempt to push tracking changes..."
              
              # Fetch latest changes
              git fetch origin ${{ github.ref_name }}
              
              # Check if we're behind
              BEHIND=$(git rev-list --count HEAD..origin/${{ github.ref_name }})
              if [ "$BEHIND" -gt 0 ]; then
                echo "Local branch is $BEHIND commits behind. Resetting and re-running..."
                
                # Reset to origin
                git reset --hard origin/${{ github.ref_name }}
                
                # Re-run the tracking script
                python prediction_tracker.py || exit 1
                
                # Stage the new files
                git add $FILE_PATTERN
                
                # Check if there are changes after re-running
                if [[ -z $(git diff --cached) ]]; then
                  echo "No changes after re-running script. Exiting."
                  exit 0
                fi
              else
                # We're up to date, just add our changes
                git add $FILE_PATTERN
              fi
              
              # Commit changes
              git commit -m "$COMMIT_MSG" || {
                echo "Nothing to commit on attempt $attempt"
                exit 0
              }
              
              # Try to push
              if git push origin ${{ github.ref_name }}; then
                echo "Successfully pushed tracking changes on attempt $attempt"
                exit 0
              else
                echo "Push failed on attempt $attempt. Retrying in 15 seconds..."
                sleep 15
              fi
            done
            
            # If all attempts failed
            echo "Failed to push tracking changes after 3 attempts"
            exit 1
          else
            echo "No tracking changes to commit"
          fi
        timeout-minutes: 3

      - name: Check for failures
        if: failure()
        run: |
          echo "::error::Prediction tracking workflow failed! Check the logs for details."
          exit 1
