name: Update Prediction Tracking

on:
  schedule:
    - cron: '0 15 * * *'  # Runs daily at 15:00 UTC - after all predictions updated
  workflow_dispatch:      # Allow manual trigger

jobs:
  update-prediction-tracking:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas matplotlib seaborn numpy
        timeout-minutes: 3

      - name: Wait for prediction data
        run: |
          # Wait up to 2 minutes for prediction data to be available
          max_attempts=12
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if [ -f "docs/award_predictions.json" ] && [ -f "docs/playoff_predictions.json" ]; then
              if [ "$(find docs/award_predictions.json -mmin -120)" ] && [ "$(find docs/playoff_predictions.json -mmin -120)" ]; then
                echo "Fresh prediction data found, proceeding with tracking..."
                break
              fi
            fi
            
            echo "Waiting for prediction data... (attempt $((attempt+1))/$max_attempts)"
            sleep 10
            attempt=$((attempt+1))
            
            git fetch origin main
            git reset --hard origin/main
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Warning: Fresh prediction data not found, continuing anyway..."
          fi
        timeout-minutes: 2

      - name: Track award prediction accuracy
        run: |
          export OUTPUT_PATH="docs"
          python prediction_tracker.py || exit 1
        timeout-minutes: 3
        continue-on-error: false

      - name: Track playoff prediction accuracy
        run: |
          export OUTPUT_PATH="docs"
          python playoff_accuracy_tracker.py || exit 1
        timeout-minutes: 3
        continue-on-error: false

      - name: Commit and push changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Handle potential conflicts
            for attempt in {1..3}; do
              echo "Attempt $attempt to push prediction tracking updates..."
              
              git fetch origin main
              git reset --hard origin/main
              
              # Re-run scripts after reset
              python prediction_tracker.py || exit 1
              python playoff_accuracy_tracker.py || exit 1
              
              # Add files
              git add docs/prediction_accuracy_report.json docs/prediction_accuracy.html docs/prediction_accuracy_chart.png docs/prediction_timeline_chart.png
              git add docs/playoff_accuracy_report.json docs/playoff_accuracy.html docs/playoff_accuracy_chart.png
              git add docs/prediction_history/ docs/playoff_prediction_history/
              git add docs/actual_winners.json docs/actual_playoff_results.json
              
              # Check if there are changes
              if [[ -z $(git diff --cached) ]]; then
                echo "No changes after re-running scripts. Exiting."
                exit 0
              fi
              
              # Commit
              git commit -m "Update prediction accuracy tracking (awards and playoffs) [skip ci]" || {
                echo "Nothing to commit on attempt $attempt"
                exit 0
              }
              
              # Try to push
              if git push origin main; then
                echo "Successfully pushed prediction tracking on attempt $attempt"
                exit 0
              else
                echo "Push failed on attempt $attempt. Retrying in 15 seconds..."
                sleep 15
              fi
            done
            
            echo "Failed to push after 3 attempts"
            exit 1
          else
            echo "No prediction tracking changes to commit"
          fi
        timeout-minutes: 3

      - name: Check for failures
        if: failure()
        run: |
          echo "::error::Prediction tracking workflow failed! Check the logs for details."
          exit 1
              if git push origin ${{ github.ref_name }}; then
                echo "Successfully pushed tracking changes on attempt $attempt"
                exit 0
              else
                echo "Push failed on attempt $attempt. Retrying in 15 seconds..."
                sleep 15
              fi
            done
            
            # If all attempts failed
            echo "Failed to push tracking changes after 3 attempts"
            exit 1
          else
            echo "No tracking changes to commit"
          fi
        timeout-minutes: 3

      - name: Check for failures
        if: failure()
        run: |
          echo "::error::Prediction tracking workflow failed! Check the logs for details."
          exit 1
