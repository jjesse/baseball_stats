name: Update Pitching Stats

on:
  schedule:
    - cron: '0 3 * * 1'  # Runs every Monday at 3 AM UTC (main branch only)
  workflow_dispatch:      # Allows manual run

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hung jobs
    # Skip scheduled runs on preview branch
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for trends

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'  # Enable pip caching

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pybaseball pandas matplotlib seaborn
      timeout-minutes: 5

    - name: Generate pitching stats charts
      run: |
        # Set output path based on branch
        if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
          export OUTPUT_PATH="docs/preview"
          mkdir -p docs/preview
        else
          export OUTPUT_PATH="docs"
        fi
        python pitching_chart.py || exit 1
      timeout-minutes: 5
      continue-on-error: false

    - name: Generate pitching trends charts
      run: |
        # Set output path based on branch
        if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
          export OUTPUT_PATH="docs/preview"
          mkdir -p docs/preview
        else
          export OUTPUT_PATH="docs"
        fi
        python trend_pitching.py || exit 1
      timeout-minutes: 5
      continue-on-error: false

    - name: Archive current pitching stats
      run: |
        mkdir -p archive
        if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
          if [ -f "docs/preview/season_stats.csv" ]; then
            cp docs/preview/season_stats.csv archive/pitching_$(date +%F).csv
          fi
        else
          if [ -f "docs/season_stats.csv" ]; then
            cp docs/season_stats.csv archive/pitching_$(date +%F).csv
          fi
        fi
      timeout-minutes: 2

    - name: Commit and push changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Handle potential conflicts
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}
          
          # Set output path based on branch
          if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
            export OUTPUT_PATH="docs/preview"
            mkdir -p docs/preview
            COMMIT_MSG="Update pitching stats and trends (preview) [skip ci]"
            FILE_PATTERN="docs/preview/*.png docs/preview/*.html docs/preview/last_updated_pitching.txt archive/pitching_*.csv"
          else
            export OUTPUT_PATH="docs"
            COMMIT_MSG="Update pitching stats and trends [skip ci]"
            FILE_PATTERN="docs/*.png docs/*.html docs/last_updated_pitching.txt archive/pitching_*.csv"
          fi
          
          # Re-run the scripts after reset
          python pitching_chart.py || exit 1
          python trend_pitching.py || exit 1
          
          # Archive again after reset
          mkdir -p archive
          if [ "${{ github.ref }}" = "refs/heads/preview" ]; then
            if [ -f "docs/preview/season_stats.csv" ]; then
              cp docs/preview/season_stats.csv archive/pitching_$(date +%F).csv
            fi
          else
            if [ -f "docs/season_stats.csv" ]; then
              cp docs/season_stats.csv archive/pitching_$(date +%F).csv
            fi
          fi
          
          # Try commit and push again
          git add $FILE_PATTERN
          git commit -m "$COMMIT_MSG"
          git push origin ${{ github.ref_name }}
        else
          echo "No changes to commit"
        fi
      timeout-minutes: 2

    - name: Check for failures
      if: failure()
      run: |
        echo "::error::Workflow failed! Check the logs for details."
        exit 1
            
            if [ $i -eq 3 ]; then
              echo "All push attempts failed"
              exit 1
            fi
          done
        else
          echo "No changes to commit"
        fi
      timeout-minutes: 5

    - name: Check for failures
      if: failure()
      run: |
        echo "::error::Workflow failed! Check the logs for details."
        exit 1
